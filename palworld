#!/bin/bash


USERNAME=$(whoami)
SERVICE_NAME="Palworld"
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
VERSION="0.1.2"
INIT_FLAG_FILE="${HOME%/}/.script_init_done"
GITHUB_URL="https://raw.githubusercontent.com/kwakdolseok/maruta/main/palworld"

print_message() {
    echo -e "[\033[1;34m\033[1m마루타 구동기\033[0m] $1"  # 파란색 볼드
}

print_message_usage() {
    echo -e "[\033[1;36m\033[1m사 용 법\033[0m] $1"  # 청록색 볼드
}

print_initial_message() {
    print_message "안녕하세요 $USERNAME 님 마루타 구동기를 이용해 주셔서 감사합니다. "
    print_message "기존에 이용자가 테스트가 아닌 먼저 테스트를 진행 후 업데이트하도록 하겠습니다."
    print_message "곽돌석은 현재 Palworld 게임 구매 안 하고 서버 구축 도 안 한 상태입니다. 그래서 여러분이 실험체입니다"
    echo " "
    print_usage
}


print_usage() {
    print_message_usage "서버 시작 : ./palworld start | st | 시작" 
    print_message_usage "기존 사용하던 screen 유틸리티 없이 백그라운드에서 실행합니다."
    echo -e ""
    print_message_usage "서버 종료 : ./palworld stop | sp | 종료"
    print_message_usage "백그라운드에서 실행 중인 게임 서버 종료합니다."
    echo -e ""
    print_message_usage "서버 업데이트 : ./palworld update | up | 업데이트"
    print_message_usage "서버 업데이트는 자동 종료 자동 업데이트 자동 시작 한 번에 수행합니다."
    echo -e ""
}

# 서비스 파일 생성 함수
create_service_file() {
    [ -f "$SERVICE_FILE" ] && return

    sudo tee "$SERVICE_FILE" >/dev/null <<EOF
[Unit]
Description=Palworld Service
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=$USERNAME
Group=$USERNAME
WorkingDirectory=${HOME%/}/Steam/steamapps/common/PalServer
ExecStart=${HOME%/}/Steam/steamapps/common/PalServer/PalServer.sh -useperfthreads -NoAsyncLoadingThread -UseMultithreadForDS
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload
    sudo systemctl enable $SERVICE_NAME
    print_message "$SERVICE_NAME 시스템에 구동기 등록이 완료되었습니다."
}

getAdminPassword() {
    local output_file="$HOME/.palworldsettings.ini"
    local admin_password=$(awk '/AdminPassword:/ {print $2}' "$output_file")
    echo "$admin_password"
}

# RCONPort 값을 얻는 함수
getRCONPort() {
    local output_file="$HOME/.palworldsettings.ini"
    local rcon_port=$(awk '/RCONPort:/ {print $2}' "$output_file")
    echo "$rcon_port"
}


execute_rcon_command() {
    local admin_password=$(getAdminPassword)
    local rcon_port=$(getRCONPort)
    local command="$1" # 첫 번째 인수를 RCON 명령으로 사용

    # RCON 명령 실행
    if [[ -n "$admin_password" && -n "$rcon_port" && -n "$command" ]]; then
        print_message "RCON 명령 실행: $command"
        ARRCON -s localhost -P "$rcon_port" -p "$admin_password" "$command"
    else
        print_message "AdminPassword, RCONPort 또는 명령어가 설정되지 않았습니다."
    fi
}

# 예제 명령어 사용법
# execute_rcon_command "여기에_RCON_명령어_입력"

# 서비스 시작 함수
start_service() {
    # 서비스 파일의 존재 여부를 확인합니다.
    if [ ! -f "$SERVICE_FILE" ]; then
        print_message "경고: Palworld Server  서비스 파일이 존재하지 않습니다. 서비스 파일을 확인하거나 생성해주세요."
        return 1 # 에러 코드와 함께 종료합니다.
    fi

    # 현재 서비스 상태를 확인합니다.
    if [ "$(systemctl is-active $SERVICE_NAME)" = "active" ]; then
        print_message "현재 Palworld Server 서버가 이미 실행 중입니다."
        return 0 # 이미 실행 중이므로 정상 종료합니다.
    else
        # 서비스를 시작합니다.
        if sudo systemctl start $SERVICE_NAME; then
            print_message "Palworld Server 시작하는 중입니다..."
            sleep 2 # 잠시 대기합니다.

            # 서비스 상태를 재확인합니다.
            if [ "$(systemctl is-active $SERVICE_NAME)" = "active" ]; then
                print_message "Palworld Server 정상적으로 시작되었습니다."
                return 0 # 정상 종료합니다.
            else
                print_message "경고: Palworld Server서비스가 시작되었으나 정상적으로 실행 중이지 않습니다."
                return 2 # 에러 코드와 함께 종료합니다.
            fi
        else
            print_message "오류:Palworld Server 시작에 실패했습니다. 시스템 로그를 확인하세요."
            return 3 # 에러 코드와 함께 종료합니다.
        fi
    fi
}

# 서비스 중지 함수
stop_service() {
    if systemctl is-active --quiet $SERVICE_NAME; then
        print_message "서버에 save 명령을 보냅니다."
        execute_rcon_command "save"
        sleep 10
        sudo systemctl stop $SERVICE_NAME
        print_message "서버를 중지합니다..."
        sleep 2  # 잠시 대기
        if systemctl is-active --quiet $SERVICE_NAME; then
            print_message "서버가 정상적으로 종료되지 않았습니다."
        else
            print_message "서버가 정상적으로 종료되었습니다."
        fi
    else
        print_message "서버는 이미 중지된 상태입니다."
    fi
}

# 서비스 업데이트 함수
update_service() {
    stop_service
    print_message "Palworld 서버 업데이트를 시작합니다..."
    update_result=$(steamcmd +login anonymous +app_update 2394010 validate +quit 2>&1)
    
    if echo "$update_result" | grep -q "Success! App '2394010' fully installed."; then
        print_message "업데이트 완료! 게임 서버를 다시 시작합니다."
        start_service
    elif echo "$update_result" | grep -q "Error"; then
        print_message "업데이트 중 오류가 발생했습니다. 상세 정보:"
        echo "$update_result"
    else
        print_message "업데이트 상태를 확인할 수 없습니다. 상세 로그를 확인하세요:"
        echo "$update_result"
    fi
}

# 리소스 삭제 함수
cleanup_resources() {
    print_message "리소스 삭제를 시작합니다..."

    # 서비스 파일 삭제
    if [ -f "$SERVICE_FILE" ]; then
        print_message "$SERVICE_NAME 서비스 파일을 삭제합니다."
        sudo systemctl stop $SERVICE_NAME
        sudo systemctl disable $SERVICE_NAME
        sudo rm -f "$SERVICE_FILE"
        sudo systemctl daemon-reload
        print_message "$SERVICE_NAME 서비스 파일이 삭제되었습니다."
    else
        print_message "$SERVICE_NAME 서비스 파일이 이미 삭제되었거나 존재하지 않습니다."
    fi

    # 초기화 플래그 파일 삭제
    if [ -f "$INIT_FLAG_FILE" ]; then
        print_message "초기화 플래그 파일을 삭제합니다."
        rm -f "$INIT_FLAG_FILE"
        print_message "초기화 플래그 파일이 삭제되었습니다."
    else
        print_message "초기화 플래그 파일이 이미 삭제되었거나 존재하지 않습니다."
    fi

    # 홈 디렉토리에서 palworld 파일/디렉토리 삭제
    local palworld_path="${HOME}/palworld"
    if [ -e "$palworld_path" ]; then
        print_message "홈 디렉토리에서 'palworld'을(를) 삭제합니다."
        rm -rf "$palworld_path"
        print_message "'palworld'이(가) 삭제되었습니다."
    else
        print_message "홈 디렉토리에 'palworld'이(가) 존재하지 않습니다."
    fi

    print_message "모든 리소스가 삭제되었습니다."
}


# 스크립트 업데이트 확인 및 실행
check_and_update_script() {
    # 첫 번째 인자로 'noupdate'를 받으면 업데이트 검사를 건너뜁니다.
    if [ "$1" = "noupdate" ]; then
        return
    fi

    local remote_version=$(wget -qO- https://raw.githubusercontent.com/kwakdolseok/maruta/main/palworld | grep '^VERSION=' | head -1 | cut -d '"' -f 2)

    if [ "$VERSION" != "$remote_version" ]; then
        print_message "새 버전 $remote_version 발견. 업데이트를 진행하시겠습니까? (yes/y 또는 no/n)"
        read -r user_input
        case $user_input in
            yes|y|YES|Y)
                print_message "스크립트를 업데이트하고 있습니다..."
                wget -q -O ~/palworld https://raw.githubusercontent.com/kwakdolseok/maruta/main/palworld
                chmod +x ~/palworld
                # 업데이트 후 스크립트를 실행할 때 'noupdate' 인자를 전달합니다.
                exec ~/palworld noupdate
                ;;
            no|n|NO|N)
                print_message "업데이트를 취소했습니다."
                ;;
            *)
                print_message "잘못된 입력입니다. 업데이트를 취소합니다."
                ;;
        esac
    fi
}


# 업데이트 체크 함수를 호출합니다.
check_and_update_script

# 초기 설정 함수
initialize_script() {
    create_service_file
    print_initial_message
    read_palworld_settings
    touch "$INIT_FLAG_FILE"
}

# 초기 설정 확인 및 실행
[ ! -f "$INIT_FLAG_FILE" ] && initialize_script


control_service() {
    case $1 in
        start|START|st|ST|시작)
            start_service
            ;;
        stop|STOP|sp|SP|정지)
            stop_service
            ;;
        update|UPDATE|up|UP|업데이트)
            update_service
            ;;
        test)
            execute_rcon_command
            ;;
        
    esac
}

# 명령어 인자에 따른 서비스 제어
control_service "$1"
